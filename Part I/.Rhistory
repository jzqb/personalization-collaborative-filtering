getwd()
write.csv(mtcars, 'mtcars.csv', row.names=F)
knitr::opts_chunk$set(echo = TRUE)
df1 <- mtcars
head(df1)
getwd()
install.packages('prettydoc')
getwd()
ls
ls()
list.files()
library(data.table)
df1 <- as.data.table(mtcars)
View(df1)
?setorderv
setorderv(df1, 'mpg', 1)
View(df1)
dat <- setorderv(x = df1, cols = c("mpg", "cyl"), order = c(1, 1))
baseline <- dat[, .SD[1], .SDcols = clinical.factors,
by = "mpg"]
baseline <- dat[, .SD[1], .SDcols = c('disp', 'hp'),
by = "mpg"]
View(baseline)
setwd("~/Desktop/drive/dsi/fall-17/personalization/personalization-collaborative-filtering/Part I")
## @knitr packages_and_libraries
library(knitr, quietly = T)
library(reshape2, quietly = T)
library(lsa, quietly = T)
library(Hmisc, quietly = T)
library(plotly, quietly = T)
library(DT, quietly = T)
library(recommenderlab, quietly = T)
library(XML, quietly = T)
library(stringr, quietly = T)
library(kableExtra, quietly = T)
load('pal.RData')
load('all_models.RData')
plot(list_results, annotate = 1, legend = "topleft")
title("ROC Curve Neighborhood-Based Models")
plot(list_results, "prec/rec", annotate = 1, legend = "bottomright")
title("Precision-Recall Neighborhood-Based Models")
err$model <- row.names(err)
err_melted <- melt(err, id.vars = "model")
p1 <- ggplot(err_melted, aes(variable, value)) +
geom_bar(aes(fill=model), position = "dodge", stat="identity") +
scale_fill_manual(values=pal(length(models_to_evaluate))) +
ggtitle("Error Metrics for Collaborative Filtering Models") +
ylab("") + xlab("") + theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplotly(p1)
p1
plot(list_results, annotate = 1, legend = "topleft")
title("ROC Curve Neighborhood-Based Models")
plot(list_results, "prec/rec", annotate = 1, legend = "bottomright")
title("Precision-Recall Neighborhood-Based Models")
list_results
p1 <-plot(list_results, annotate = 1, legend = "topleft")
title("ROC Curve Neighborhood-Based Models")
p1 <-plot(list_results, annotate = 1, legend = "topleft")
title("ROC Curve Neighborhood-Based Models")
p1 <- ggplotly(p1)
p1 <-ggplot(list_results, annotate = 1, legend = "topleft")
plot(list_results_ib, annotate = 1, legend = "topleft")
title("ROC Curve Item-Based Collaborative Filtering (Pearson)")
plot(list_results_ib, "prec/rec", annotate = 1, legend = "bottomright")
title("Precision-Recall Item-Based Collaborative Filtering (Pearson)")
p2 <- ggplot(err_ib, aes(x = k, y = MAE)) + geom_line(color = "blue") +
ggtitle("Prediction Error versus Neighborhood Size\nfor Item-Based CF (pearson correlation)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Number of Nearest Neighbors")
p2 <- ggplotly(p2)
p2
plot(list_results_ub, annotate = 1, legend = "topleft")
title("ROC Curve User-Based Collaborative Filtering (Cosine)")
plot(list_results_ub, "prec/rec", annotate = 1, legend = "bottomright")
title("Precision-Recall User-Based Collaborative Filtering (Cosine)")
err_ub$nn <- nn_users
p3 <- ggplot(err_ub, aes(x = nn, y = MAE)) + geom_line(color = "red") +
ggtitle("Prediction Error versus Neighborhood Size\nfor User-Based CF (cosine similarity)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Number of Nearest Neighbors")
p3 <- ggplotly(p3)
p3
p4 <- ggplot(size_err_all, aes(x = train_prop, y = MAE)) + geom_line(aes(color = model)) +
ggtitle("Error versus Sample Size") +
xlab("Proportion of Data Trained On") +
theme(plot.title = element_text(hjust = 0.5))
p4 <- ggplotly(p4)
p4
p5 <- ggplot(keep_err_all, aes(x = ratings_given, y = MAE)) + geom_line(aes(color = model)) +
ggtitle("Error versus Information About User Preference") +
xlab("Ratings Given for Each Test User") +
theme(plot.title = element_text(hjust = 0.5))
p5 <- ggplotly(p5)
p5
p6 <- ggplot(keep2_err_all, aes(x = ratings_given, y = MAE)) + geom_line(aes(color = model)) +
ggtitle("Error versus Information About User Preference") +
xlab("Ratings Given for Each Test User") +
theme(plot.title = element_text(hjust = 0.5))
p6 <- ggplotly(p6)
p6
![Item Based Collaborative Filtering Approach.](/Users/gauravsingh/Desktop/drive/dsi/fall-17/personalization/projects-in-r/img/item.png)
rm(list = ls())
